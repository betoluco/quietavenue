AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates all the infraestructures neede for quietavenue
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    AllowedValues:
    - dev
    - prod
    Description: 
      Environment in which the application will be deployed. 
      Allowed values [dev, prod]
    
  Project:
    Type: String
    Default: quietavenue
    Description: Name of the project used in the tags
    
  DomainName:
    Type: String
    Default: https://quietavenue.com
    Description: Domain name for production site
    
  Port:
    Type: String
    Default: 5432
    Description: Port for database communications
    
  DBUserName:
    Type: String
    Description: Name for the user with read only permissions for the database
    
  DatabaseName:
    Type: String
    Description: Postgres database name
  
  AvailabilityZone1a:
    Type: String
    Description:
      Avaliability zone 1a for public and private subnets
      
  AvailabilityZone1b:
    Type: String
    Description:
      Avaliability zone 1b for public and private subnets 
  
  VPCCidrBlock:
    Type: String
    Description:
      CidrBlock used in VPC
      
  PrivSub1aCidrBlock:
    Type: String
    Description:
      CidrBlock used in public subnet 1a
      
  PrivSub1bCidrBlock:
    Type: String
    Description:
      CidrBlock used in public subnet 1b
  
  PubSub1aCidrBlock:
    Type: String
    Description:
      CidrBlock used in private subnet 1a
      
  PubSub1bCidrBlock:
    Type: String
    Description:
      CidrBlock used in private subnet 1b
      
  DestinationPrefixListId:
    Type: String
    Description:
      Gateway endpoint for Amazon S3. Allows access to S3 from your VPC
  
Conditions:
  IsProduction: !Equals [!Ref Env, prod]
    
Resources:
  DBProxyPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        !Sub
        - ${Environment}-${Project}-DBProxy-password-secret-${Id}
        - Project: !Ref Project
          Environment: !Ref Env
          Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] 
      Description: Secret with an autogenerated password for a user with read only
        privilege that is used for the DB proxy to access the database
      GenerateSecretString:
        SecretStringTemplate: 
          !Sub
        - '{"username": "${read_user}"}'
        - read_user: !Ref DBUserName
        GenerateStringKey: password
        PasswordLength: 30
        ExcludePunctuation: true
      Tags:
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Env
  
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/vpcTemplate.yaml
      Parameters:
        Project: !Ref Project
        Env: !Ref Env
        AvailabilityZone1a: !Ref AvailabilityZone1a
        AvailabilityZone1b: !Ref AvailabilityZone1b
        VPCCidrBlock: !Ref VPCCidrBlock
        PrivSub1aCidrBlock: !Ref PrivSub1aCidrBlock
        PrivSub1bCidrBlock: !Ref PrivSub1bCidrBlock
        PubSub1aCidrBlock: !Ref PubSub1aCidrBlock
        PubSub1bCidrBlock: !Ref PubSub1bCidrBlock
  
  SecurityGroupsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/securityGroupsTemplate.yaml
      Parameters:
        Project: !Ref Project
        Env: !Ref Env
        VPC: !GetAtt VPCStack.Outputs.VPC
        Port: !Ref Port
        DestinationPrefixListId: !Ref DestinationPrefixListId
  
  DatabaseTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/databaseTemplate.yaml
      Parameters:
        Project: !Ref Project
        Env: !Ref Env
        VPCPrivateSubnet1a: !GetAtt VPCStack.Outputs.VPCPrivateSubnet1a
        VPCPrivateSubnet1b: !GetAtt VPCStack.Outputs.VPCPrivateSubnet1b
        Port: !Ref Port
        DBSecurityGroup: !GetAtt SecurityGroupsStack.Outputs.DBSecurityGroup
  
  DatabaseProxyTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/databaseProxyTemplate.yaml
      Parameters:
        Project: !Ref Project
        Env: !Ref Env
        VPCPrivateSubnet1a: !GetAtt VPCStack.Outputs.VPCPrivateSubnet1a
        VPCPrivateSubnet1b: !GetAtt VPCStack.Outputs.VPCPrivateSubnet1b
        DBProxySecurityGroup: !GetAtt SecurityGroupsStack.Outputs.DBProxySecurityGroup
        DBCluster: !GetAtt DatabaseTemplate.Outputs.DBCluster
        DBProxyPasswordSecret: !Ref DBProxyPasswordSecret
  
  BackEndS3BucketStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/backEndS3BucketTemplate.yaml
      Parameters:
        Project: !Ref Project
        Env: !Ref Env
        VPC: !GetAtt VPCStack.Outputs.VPC
        PrivateSubnetRouteTable: !GetAtt VPCStack.Outputs.PrivateSubnetRouteTable
  
  FrontEndS3BucketStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/frontEndS3BucketTemplate.yaml
      Parameters:
        Project: !Ref Project
        Env: !Ref Env
  
  GetApiKeyTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/getApiKeyTemplate.yaml
      Parameters:
        Project: !Ref Project
        Env: !Ref Env
        APIGatewayApiKey: !Ref APIGateway.ApiKey
        
  GetApiKeyValue:
    Type: Custom::ApiKeyValue
    Properties:
      ServiceToken: !GetAtt GetApiKeyTemplate.Outputs.GetApiKeyValueFunction
      Tags:
        - Key: Name
          Value:
            !Sub
            - ${Environment}-${Project}-get-front-end-api-key-${Id}
            - Project: !Ref Project
              Environment: !Ref Env
              Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Env
  
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Sub
        - ${Environment}-${Project}-lambda-backend-IAM-role-${Id}
        - Project: !Ref Project
          Environment: !Ref Env
          Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] 
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
      - PolicyName:
          !Sub
          - ${Environment}-${Project}-lambda-policy-${Id}
          - Project: !Ref Project
            Environment: !Ref Env
            Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] 
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: GetObjectsFromBucket
            Effect: Allow
            Action: 
              - s3:GetObject
            Resource: 
              - !Join [ '/', [ !GetAtt BackEndS3BucketStack.Outputs.BackEndS3BucketARN, '*' ] ]
      Tags:
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Env
  
  BackEndLambdaAPIServer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName:
        !Sub
        - ${Environment}-${Project}-backend-API-server-${Id}
        - Project: !Ref Project
          Environment: !Ref Env
          Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] 
      Timeout: 10
      CodeUri: ./backEndBundle/
      Handler: backEndBundle.backEndHandler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: nodejs18.x
      Description: lambda function for the backend
      Environment:
        Variables:
          CORS: !If [IsProduction, !Ref DomainName, '*']
          ENDPOINT: !GetAtt DatabaseProxyTemplate.Outputs.DBProxyEndpoint
          DATABASE_NAME: !Ref DatabaseName
          PORT: !Ref Port
          S3_BUCKET: !GetAtt BackEndS3BucketStack.Outputs.BackEndS3Bucket
          PROXY_USERNAME:
            !Sub
            - '{{resolve:secretsmanager:${secretName}:SecretString:username}}'
            - secretName: !Ref DBProxyPasswordSecret
          PROXY_PASSWORD:
            !Sub
            - '{{resolve:secretsmanager:${secretName}:SecretString:password}}'
            - secretName: !Ref DBProxyPasswordSecret
          
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SecurityGroupsStack.Outputs.LambdaSecurityGroup
        SubnetIds:
        - !GetAtt VPCStack.Outputs.VPCPrivateSubnet1a
        - !GetAtt VPCStack.Outputs.VPCPrivateSubnet1b
      Events:
        APIGatewayRootEndpoint: #Whitout this it will throw missing authentication token
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: api/
            Method: any
            Auth:
              ApiKeyRequired: true
        APIgatewayProxyGreedy:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref APIGateway
            Path: api/{proxy+}
            Method: any
            Auth:
              ApiKeyRequired: true
      Tags:
        Project: !Ref Project
        Environment: !Ref Env
        
  FrontEndLambdaServerSideRendering:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName:
        !Sub
        - ${Environment}-${Project}-fronEnd-server-side-rendering-${Id}
        - Project: !Ref Project
          Environment: !Ref Env
          Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] 
      Timeout: 10
      CodeUri: ./frontEndBundle/
      Handler: serverBundle.handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: nodejs18.x
      Description: lambda function and Proxy Greedy API for server side rendering
      Events:
        APIGatewayRootEndpoint: #Whitout this it will throw missing authentication token
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /
            Method: any
            Auth:
              ApiKeyRequired: true
        APIgatewayProxyGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /{proxy+}
            Method: any
            Auth:
              ApiKeyRequired: true
  
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: 
        !Sub
          - ${Environment}-${Project}-APIGateway-${Id}
          - Project: !Ref Project
            Environment: !Ref Env
            Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] 
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: API gateway usage plan, key and usage plan key for quietavenue
      Tags:
        Project: !Ref Project
        Environment: !Ref Env
   
  CFDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment:
          !Sub
            - ${Environment}-${Project}-frontEnd-cloudfront-dist-${Id}
            - Project: !Ref Project
              Environment: !Ref Env
              Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]] 
        Origins:
          - 
            Id: !Sub ${APIGateway}-origin
            DomainName: !Sub ${APIGateway}.execute-api.us-west-1.amazonaws.com
            OriginPath: /Prod #name of the deployed stage
            CustomOriginConfig:
              OriginProtocolPolicy: https-only #again API-Gateway only supports https
            OriginCustomHeaders:
              - HeaderName: x-api-key
                HeaderValue: !GetAtt GetApiKeyValue.Value
          - 
            Id: !GetAtt FrontEndS3BucketStack.Outputs.FrontEndS3Bucket
            DomainName: !Sub ${FrontEndS3BucketStack.Outputs.FrontEndS3Bucket}.s3.amazonaws.com
            S3OriginConfig: 
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${FrontEndS3BucketStack.Outputs.CFOriginAccessIdentityFrontEnd}
              
          - 
            Id: !GetAtt BackEndS3BucketStack.Outputs.BackEndS3Bucket
            DomainName: !Sub ${BackEndS3BucketStack.Outputs.BackEndS3Bucket}.s3.amazonaws.com
            S3OriginConfig: 
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${BackEndS3BucketStack.Outputs.CFOriginAccessIdentityBackEnd}
            
        DefaultCacheBehavior: 
          TargetOriginId: !Sub ${APIGateway}-origin #name of the origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          # Without this policy the query string parameters are not included in the request
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
        CacheBehaviors:
          - 
            TargetOriginId: !GetAtt FrontEndS3BucketStack.Outputs.FrontEndS3Bucket
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: staticAssets/*
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          - 
            TargetOriginId: !GetAtt BackEndS3BucketStack.Outputs.BackEndS3Bucket
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: assets/*
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          - 
            TargetOriginId: !GetAtt FrontEndS3BucketStack.Outputs.FrontEndS3Bucket
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: favicon.ico
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        Enabled: true
      Tags:
        - Key: Name
          Value:
            !Sub
            - ${Environment}-${Project}-CF-distribution-${Id}
            - Project: !Ref Project
              Environment: !Ref Env
              Id: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Env
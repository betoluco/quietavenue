AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  see "understanding the deployment process of the project" in the docs

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Resources:
  ServerlessSideRenderingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: 
              - sts:AssumeRole
            Principal:
              Service: 
                - lambda.amazonaws.com
      Policies:
        -
          PolicyName: ServerlessSideRenderingFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action: 
                - s3:GetObject
                - dynamodb:Scan
              Resource: 
                - !Sub ${S3BucketAssets.Arn}/*
                - !GetAtt SourceDynamoDBTable.Arn
  
  ServerlessSideRenderingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: code/
      Handler: serverBundle.handler
      Role: !GetAtt ServerlessSideRenderingFunctionRole.Arn
      Runtime: nodejs14.x
      Description: lambda function and Proxy Greedy API for quietavenue
      Environment:
        Variables:
          DINAMODB_TABLE: !Ref SourceDynamoDBTable
          S3_BUCKET: !Ref S3BucketAssets
      Events:
        APIGatewayRootEndpoint: #Whitout this it will throw missing authentication token
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /
            Method: any
            Auth:
              ApiKeyRequired: true
        APIgatewayProxyGreedy:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /{proxy+}
            Method: any
            Auth:
              ApiKeyRequired: true
  
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: API gateway usage plan, key and usage plan key for quietavenue
          
  CFDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - 
            Id: !Sub ${APIGateway}-origin
            DomainName: !Sub ${APIGateway}.execute-api.us-west-1.amazonaws.com
            OriginPath: /Prod #name of the deployed stage
            CustomOriginConfig:
              OriginProtocolPolicy: https-only #again API-Gateway only supports https
            OriginCustomHeaders:
              - 
                HeaderName: x-api-key
                HeaderValue: !GetAtt GetApiKeyValue.Value
          -
            Id: !Ref S3BucketAssets
            DomainName: !Sub ${S3BucketAssets}.s3.amazonaws.com
            S3OriginConfig: 
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CFOriginAccessIdentity}
            
        DefaultCacheBehavior: #this section defines attached behaviors,
          TargetOriginId: !Sub ${APIGateway}-origin #name of the origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        CacheBehaviors:
          -
            TargetOriginId: !Ref S3BucketAssets
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: assets/*
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          -
            TargetOriginId: !Ref S3BucketAssets
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: favicon.ico
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        Enabled: true
      Tags:
        - Key: description
          Value: CloudFront for quietavenue
  
  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: "Origin access identity for S3 bucket assets"
  
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: API gateway usage plan, key and usage plan key for quietavenue
  
# Custom Resource to retrieve API Key value instead of ID

  GetApiKeyValue:
    DependsOn: APIGateway
    Type: Custom::ApiKeyValue
    Properties:
      ServiceToken: !GetAtt GetApiKeyValueFunction.Arn

  GetApiKeyValueFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: 
              - sts:AssumeRole
            Principal:
              Service: 
                - lambda.amazonaws.com
      Policies:
        - 
          PolicyName: RotateKeysPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - 
                Effect: Allow
                Action: apigateway:GET
                Resource: "*"

  GetApiKeyValueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CFScripts/
      Handler: getApiKey.lambda_handler
      Role: !GetAtt GetApiKeyValueFunctionRole.Arn
      Runtime: python3.7
      Timeout: 120
      Description: lambda obtains api key and pass it to cloudfront
      Environment:
        Variables:
          API_KEY: !Ref APIGateway.ApiKey
      
  SourceDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties: 
      AttributeDefinitions:
        -
          AttributeName: PK
          AttributeType: S
      KeySchema: 
        - 
          AttributeName: PK
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 50
        WriteCapacityUnits: 5
      Tags:
        - Key: description
          Value:  DynamoDB table source data for quietavenue
        
  S3BucketAssets:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: description
          Value: S3 Bucket for assets
  
  S3BucketAssetsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3BucketAssets
      PolicyDocument:
        Version: '2008-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: 1
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${S3BucketAssets.Arn}/*'
            Principal: 
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CFOriginAccessIdentity}'